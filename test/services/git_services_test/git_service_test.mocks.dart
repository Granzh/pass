// Mocks generated by Mockito 5.4.6 from annotations
// in pass/test/services/git_services_test/git_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:convert' as _i14;
import 'dart:io' as _i12;

import 'package:flutter/foundation.dart' as _i5;
import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i2;
import 'package:git/src/branch_reference.dart' as _i4;
import 'package:git/src/commit.dart' as _i3;
import 'package:git/src/commit_reference.dart' as _i10;
import 'package:git/src/git_dir.dart' as _i7;
import 'package:git/src/tag.dart' as _i9;
import 'package:git/src/tree_entry.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:pass/services/git_services/process_runner.dart' as _i13;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIOSOptions_0 extends _i1.SmartFake implements _i2.IOSOptions {
  _FakeIOSOptions_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAndroidOptions_1 extends _i1.SmartFake
    implements _i2.AndroidOptions {
  _FakeAndroidOptions_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLinuxOptions_2 extends _i1.SmartFake implements _i2.LinuxOptions {
  _FakeLinuxOptions_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWindowsOptions_3 extends _i1.SmartFake
    implements _i2.WindowsOptions {
  _FakeWindowsOptions_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWebOptions_4 extends _i1.SmartFake implements _i2.WebOptions {
  _FakeWebOptions_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMacOsOptions_5 extends _i1.SmartFake implements _i2.MacOsOptions {
  _FakeMacOsOptions_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCommit_6 extends _i1.SmartFake implements _i3.Commit {
  _FakeCommit_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBranchReference_7 extends _i1.SmartFake
    implements _i4.BranchReference {
  _FakeBranchReference_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [FlutterSecureStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterSecureStorage extends _i1.Mock
    implements _i2.FlutterSecureStorage {
  MockFlutterSecureStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IOSOptions get iOptions =>
      (super.noSuchMethod(
            Invocation.getter(#iOptions),
            returnValue: _FakeIOSOptions_0(this, Invocation.getter(#iOptions)),
          )
          as _i2.IOSOptions);

  @override
  _i2.AndroidOptions get aOptions =>
      (super.noSuchMethod(
            Invocation.getter(#aOptions),
            returnValue: _FakeAndroidOptions_1(
              this,
              Invocation.getter(#aOptions),
            ),
          )
          as _i2.AndroidOptions);

  @override
  _i2.LinuxOptions get lOptions =>
      (super.noSuchMethod(
            Invocation.getter(#lOptions),
            returnValue: _FakeLinuxOptions_2(
              this,
              Invocation.getter(#lOptions),
            ),
          )
          as _i2.LinuxOptions);

  @override
  _i2.WindowsOptions get wOptions =>
      (super.noSuchMethod(
            Invocation.getter(#wOptions),
            returnValue: _FakeWindowsOptions_3(
              this,
              Invocation.getter(#wOptions),
            ),
          )
          as _i2.WindowsOptions);

  @override
  _i2.WebOptions get webOptions =>
      (super.noSuchMethod(
            Invocation.getter(#webOptions),
            returnValue: _FakeWebOptions_4(
              this,
              Invocation.getter(#webOptions),
            ),
          )
          as _i2.WebOptions);

  @override
  _i2.MacOsOptions get mOptions =>
      (super.noSuchMethod(
            Invocation.getter(#mOptions),
            returnValue: _FakeMacOsOptions_5(
              this,
              Invocation.getter(#mOptions),
            ),
          )
          as _i2.MacOsOptions);

  @override
  void registerListener({
    required String? key,
    required _i5.ValueChanged<String?>? listener,
  }) => super.noSuchMethod(
    Invocation.method(#registerListener, [], {#key: key, #listener: listener}),
    returnValueForMissingStub: null,
  );

  @override
  void unregisterListener({
    required String? key,
    required _i5.ValueChanged<String?>? listener,
  }) => super.noSuchMethod(
    Invocation.method(#unregisterListener, [], {
      #key: key,
      #listener: listener,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void unregisterAllListenersForKey({required String? key}) =>
      super.noSuchMethod(
        Invocation.method(#unregisterAllListenersForKey, [], {#key: key}),
        returnValueForMissingStub: null,
      );

  @override
  void unregisterAllListeners() => super.noSuchMethod(
    Invocation.method(#unregisterAllListeners, []),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<void> write({
    required String? key,
    required String? value,
    _i2.IOSOptions? iOptions,
    _i2.AndroidOptions? aOptions,
    _i2.LinuxOptions? lOptions,
    _i2.WebOptions? webOptions,
    _i2.MacOsOptions? mOptions,
    _i2.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#write, [], {
              #key: key,
              #value: value,
              #iOptions: iOptions,
              #aOptions: aOptions,
              #lOptions: lOptions,
              #webOptions: webOptions,
              #mOptions: mOptions,
              #wOptions: wOptions,
            }),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<String?> read({
    required String? key,
    _i2.IOSOptions? iOptions,
    _i2.AndroidOptions? aOptions,
    _i2.LinuxOptions? lOptions,
    _i2.WebOptions? webOptions,
    _i2.MacOsOptions? mOptions,
    _i2.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#read, [], {
              #key: key,
              #iOptions: iOptions,
              #aOptions: aOptions,
              #lOptions: lOptions,
              #webOptions: webOptions,
              #mOptions: mOptions,
              #wOptions: wOptions,
            }),
            returnValue: _i6.Future<String?>.value(),
          )
          as _i6.Future<String?>);

  @override
  _i6.Future<bool> containsKey({
    required String? key,
    _i2.IOSOptions? iOptions,
    _i2.AndroidOptions? aOptions,
    _i2.LinuxOptions? lOptions,
    _i2.WebOptions? webOptions,
    _i2.MacOsOptions? mOptions,
    _i2.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#containsKey, [], {
              #key: key,
              #iOptions: iOptions,
              #aOptions: aOptions,
              #lOptions: lOptions,
              #webOptions: webOptions,
              #mOptions: mOptions,
              #wOptions: wOptions,
            }),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<void> delete({
    required String? key,
    _i2.IOSOptions? iOptions,
    _i2.AndroidOptions? aOptions,
    _i2.LinuxOptions? lOptions,
    _i2.WebOptions? webOptions,
    _i2.MacOsOptions? mOptions,
    _i2.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [], {
              #key: key,
              #iOptions: iOptions,
              #aOptions: aOptions,
              #lOptions: lOptions,
              #webOptions: webOptions,
              #mOptions: mOptions,
              #wOptions: wOptions,
            }),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<Map<String, String>> readAll({
    _i2.IOSOptions? iOptions,
    _i2.AndroidOptions? aOptions,
    _i2.LinuxOptions? lOptions,
    _i2.WebOptions? webOptions,
    _i2.MacOsOptions? mOptions,
    _i2.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readAll, [], {
              #iOptions: iOptions,
              #aOptions: aOptions,
              #lOptions: lOptions,
              #webOptions: webOptions,
              #mOptions: mOptions,
              #wOptions: wOptions,
            }),
            returnValue: _i6.Future<Map<String, String>>.value(
              <String, String>{},
            ),
          )
          as _i6.Future<Map<String, String>>);

  @override
  _i6.Future<void> deleteAll({
    _i2.IOSOptions? iOptions,
    _i2.AndroidOptions? aOptions,
    _i2.LinuxOptions? lOptions,
    _i2.WebOptions? webOptions,
    _i2.MacOsOptions? mOptions,
    _i2.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#deleteAll, [], {
              #iOptions: iOptions,
              #aOptions: aOptions,
              #lOptions: lOptions,
              #webOptions: webOptions,
              #mOptions: mOptions,
              #wOptions: wOptions,
            }),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<bool?> isCupertinoProtectedDataAvailable() =>
      (super.noSuchMethod(
            Invocation.method(#isCupertinoProtectedDataAvailable, []),
            returnValue: _i6.Future<bool?>.value(),
          )
          as _i6.Future<bool?>);
}

/// A class which mocks [GitDir].
///
/// See the documentation for Mockito's code generation for more information.
class MockGitDir extends _i1.Mock implements _i7.GitDir {
  MockGitDir() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get path =>
      (super.noSuchMethod(
            Invocation.getter(#path),
            returnValue: _i8.dummyValue<String>(this, Invocation.getter(#path)),
          )
          as String);

  @override
  _i6.Future<int> commitCount([String? branchName = 'HEAD']) =>
      (super.noSuchMethod(
            Invocation.method(#commitCount, [branchName]),
            returnValue: _i6.Future<int>.value(0),
          )
          as _i6.Future<int>);

  @override
  _i6.Future<_i3.Commit> commitFromRevision(String? revision) =>
      (super.noSuchMethod(
            Invocation.method(#commitFromRevision, [revision]),
            returnValue: _i6.Future<_i3.Commit>.value(
              _FakeCommit_6(
                this,
                Invocation.method(#commitFromRevision, [revision]),
              ),
            ),
          )
          as _i6.Future<_i3.Commit>);

  @override
  _i6.Future<Map<String, _i3.Commit>> commits([String? branchName = 'HEAD']) =>
      (super.noSuchMethod(
            Invocation.method(#commits, [branchName]),
            returnValue: _i6.Future<Map<String, _i3.Commit>>.value(
              <String, _i3.Commit>{},
            ),
          )
          as _i6.Future<Map<String, _i3.Commit>>);

  @override
  _i6.Future<_i4.BranchReference?> branchReference(String? branchName) =>
      (super.noSuchMethod(
            Invocation.method(#branchReference, [branchName]),
            returnValue: _i6.Future<_i4.BranchReference?>.value(),
          )
          as _i6.Future<_i4.BranchReference?>);

  @override
  _i6.Future<List<_i4.BranchReference>> branches() =>
      (super.noSuchMethod(
            Invocation.method(#branches, []),
            returnValue: _i6.Future<List<_i4.BranchReference>>.value(
              <_i4.BranchReference>[],
            ),
          )
          as _i6.Future<List<_i4.BranchReference>>);

  @override
  _i6.Stream<_i9.Tag> tags() =>
      (super.noSuchMethod(
            Invocation.method(#tags, []),
            returnValue: _i6.Stream<_i9.Tag>.empty(),
          )
          as _i6.Stream<_i9.Tag>);

  @override
  _i6.Future<List<_i10.CommitReference>> showRef({
    bool? heads = false,
    bool? tags = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#showRef, [], {#heads: heads, #tags: tags}),
            returnValue: _i6.Future<List<_i10.CommitReference>>.value(
              <_i10.CommitReference>[],
            ),
          )
          as _i6.Future<List<_i10.CommitReference>>);

  @override
  _i6.Future<_i4.BranchReference> currentBranch() =>
      (super.noSuchMethod(
            Invocation.method(#currentBranch, []),
            returnValue: _i6.Future<_i4.BranchReference>.value(
              _FakeBranchReference_7(
                this,
                Invocation.method(#currentBranch, []),
              ),
            ),
          )
          as _i6.Future<_i4.BranchReference>);

  @override
  _i6.Future<List<_i11.TreeEntry>> lsTree(
    String? treeish, {
    bool? subTreesOnly = false,
    String? path,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #lsTree,
              [treeish],
              {#subTreesOnly: subTreesOnly, #path: path},
            ),
            returnValue: _i6.Future<List<_i11.TreeEntry>>.value(
              <_i11.TreeEntry>[],
            ),
          )
          as _i6.Future<List<_i11.TreeEntry>>);

  @override
  _i6.Future<String?> createOrUpdateBranch(
    String? branchName,
    String? treeSha,
    String? commitMessage,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createOrUpdateBranch, [
              branchName,
              treeSha,
              commitMessage,
            ]),
            returnValue: _i6.Future<String?>.value(),
          )
          as _i6.Future<String?>);

  @override
  _i6.Future<String> commitTree(
    String? treeSha,
    String? commitMessage, {
    List<String>? parentCommitShas,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #commitTree,
              [treeSha, commitMessage],
              {#parentCommitShas: parentCommitShas},
            ),
            returnValue: _i6.Future<String>.value(
              _i8.dummyValue<String>(
                this,
                Invocation.method(
                  #commitTree,
                  [treeSha, commitMessage],
                  {#parentCommitShas: parentCommitShas},
                ),
              ),
            ),
          )
          as _i6.Future<String>);

  @override
  _i6.Future<Map<String, String>> writeObjects(List<String>? paths) =>
      (super.noSuchMethod(
            Invocation.method(#writeObjects, [paths]),
            returnValue: _i6.Future<Map<String, String>>.value(
              <String, String>{},
            ),
          )
          as _i6.Future<Map<String, String>>);

  @override
  _i6.Future<_i12.ProcessResult> runCommand(
    Iterable<String>? args, {
    bool? throwOnError = true,
    bool? echoOutput = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #runCommand,
              [args],
              {#throwOnError: throwOnError, #echoOutput: echoOutput},
            ),
            returnValue: _i6.Future<_i12.ProcessResult>.value(
              _i8.dummyValue<_i12.ProcessResult>(
                this,
                Invocation.method(
                  #runCommand,
                  [args],
                  {#throwOnError: throwOnError, #echoOutput: echoOutput},
                ),
              ),
            ),
          )
          as _i6.Future<_i12.ProcessResult>);

  @override
  _i6.Future<bool> isWorkingTreeClean() =>
      (super.noSuchMethod(
            Invocation.method(#isWorkingTreeClean, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<_i3.Commit?> updateBranch(
    String? branchName,
    _i6.Future<void> Function(_i12.Directory)? populater,
    String? commitMessage,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateBranch, [
              branchName,
              populater,
              commitMessage,
            ]),
            returnValue: _i6.Future<_i3.Commit?>.value(),
          )
          as _i6.Future<_i3.Commit?>);

  @override
  _i6.Future<_i3.Commit?> updateBranchWithDirectoryContents(
    String? branchName,
    String? sourceDirectoryPath,
    String? commitMessage,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateBranchWithDirectoryContents, [
              branchName,
              sourceDirectoryPath,
              commitMessage,
            ]),
            returnValue: _i6.Future<_i3.Commit?>.value(),
          )
          as _i6.Future<_i3.Commit?>);
}

/// A class which mocks [IProcessRunner].
///
/// See the documentation for Mockito's code generation for more information.
class MockIProcessRunner extends _i1.Mock implements _i13.IProcessRunner {
  MockIProcessRunner() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i12.ProcessResult> run(
    String? executable,
    List<String>? arguments, {
    String? workingDirectory,
    Map<String, String>? environment,
    bool? includeParentEnvironment = true,
    bool? runInShell = false,
    _i14.Encoding? stdoutEncoding = const _i12.SystemEncoding(),
    _i14.Encoding? stderrEncoding = const _i12.SystemEncoding(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #run,
              [executable, arguments],
              {
                #workingDirectory: workingDirectory,
                #environment: environment,
                #includeParentEnvironment: includeParentEnvironment,
                #runInShell: runInShell,
                #stdoutEncoding: stdoutEncoding,
                #stderrEncoding: stderrEncoding,
              },
            ),
            returnValue: _i6.Future<_i12.ProcessResult>.value(
              _i8.dummyValue<_i12.ProcessResult>(
                this,
                Invocation.method(
                  #run,
                  [executable, arguments],
                  {
                    #workingDirectory: workingDirectory,
                    #environment: environment,
                    #includeParentEnvironment: includeParentEnvironment,
                    #runInShell: runInShell,
                    #stdoutEncoding: stdoutEncoding,
                    #stderrEncoding: stderrEncoding,
                  },
                ),
              ),
            ),
          )
          as _i6.Future<_i12.ProcessResult>);
}
