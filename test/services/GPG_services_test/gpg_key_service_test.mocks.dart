// Mocks generated by Mockito 5.4.6 from annotations
// in pass/test/services/GPG_services_test/gpg_key_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i12;
import 'dart:convert' as _i15;
import 'dart:io' as _i8;
import 'dart:typed_data' as _i16;

import 'package:file/src/interface/directory.dart' as _i5;
import 'package:file/src/interface/file.dart' as _i6;
import 'package:file/src/interface/file_system.dart' as _i9;
import 'package:file/src/interface/file_system_entity.dart' as _i10;
import 'package:file/src/interface/link.dart' as _i7;
import 'package:flutter/foundation.dart' as _i11;
import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i14;
import 'package:openpgp/openpgp.dart' as _i3;
import 'package:pass/core/utils/pgp_provider.dart' as _i13;
import 'package:path/path.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIOSOptions_0 extends _i1.SmartFake implements _i2.IOSOptions {
  _FakeIOSOptions_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAndroidOptions_1 extends _i1.SmartFake
    implements _i2.AndroidOptions {
  _FakeAndroidOptions_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLinuxOptions_2 extends _i1.SmartFake implements _i2.LinuxOptions {
  _FakeLinuxOptions_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWindowsOptions_3 extends _i1.SmartFake
    implements _i2.WindowsOptions {
  _FakeWindowsOptions_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWebOptions_4 extends _i1.SmartFake implements _i2.WebOptions {
  _FakeWebOptions_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMacOsOptions_5 extends _i1.SmartFake implements _i2.MacOsOptions {
  _FakeMacOsOptions_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeKeyPair_6 extends _i1.SmartFake implements _i3.KeyPair {
  _FakeKeyPair_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeContext_7 extends _i1.SmartFake implements _i4.Context {
  _FakeContext_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDirectory_8 extends _i1.SmartFake implements _i5.Directory {
  _FakeDirectory_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFile_9 extends _i1.SmartFake implements _i6.File {
  _FakeFile_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLink_10 extends _i1.SmartFake implements _i7.Link {
  _FakeLink_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFileStat_11 extends _i1.SmartFake implements _i8.FileStat {
  _FakeFileStat_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFileSystem_12 extends _i1.SmartFake implements _i9.FileSystem {
  _FakeFileSystem_12(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUri_13 extends _i1.SmartFake implements Uri {
  _FakeUri_13(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFileSystemEntity_14 extends _i1.SmartFake
    implements _i10.FileSystemEntity {
  _FakeFileSystemEntity_14(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDateTime_15 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_15(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRandomAccessFile_16 extends _i1.SmartFake
    implements _i8.RandomAccessFile {
  _FakeRandomAccessFile_16(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeIOSink_17 extends _i1.SmartFake implements _i8.IOSink {
  _FakeIOSink_17(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [FlutterSecureStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterSecureStorage extends _i1.Mock
    implements _i2.FlutterSecureStorage {
  MockFlutterSecureStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IOSOptions get iOptions =>
      (super.noSuchMethod(
            Invocation.getter(#iOptions),
            returnValue: _FakeIOSOptions_0(this, Invocation.getter(#iOptions)),
          )
          as _i2.IOSOptions);

  @override
  _i2.AndroidOptions get aOptions =>
      (super.noSuchMethod(
            Invocation.getter(#aOptions),
            returnValue: _FakeAndroidOptions_1(
              this,
              Invocation.getter(#aOptions),
            ),
          )
          as _i2.AndroidOptions);

  @override
  _i2.LinuxOptions get lOptions =>
      (super.noSuchMethod(
            Invocation.getter(#lOptions),
            returnValue: _FakeLinuxOptions_2(
              this,
              Invocation.getter(#lOptions),
            ),
          )
          as _i2.LinuxOptions);

  @override
  _i2.WindowsOptions get wOptions =>
      (super.noSuchMethod(
            Invocation.getter(#wOptions),
            returnValue: _FakeWindowsOptions_3(
              this,
              Invocation.getter(#wOptions),
            ),
          )
          as _i2.WindowsOptions);

  @override
  _i2.WebOptions get webOptions =>
      (super.noSuchMethod(
            Invocation.getter(#webOptions),
            returnValue: _FakeWebOptions_4(
              this,
              Invocation.getter(#webOptions),
            ),
          )
          as _i2.WebOptions);

  @override
  _i2.MacOsOptions get mOptions =>
      (super.noSuchMethod(
            Invocation.getter(#mOptions),
            returnValue: _FakeMacOsOptions_5(
              this,
              Invocation.getter(#mOptions),
            ),
          )
          as _i2.MacOsOptions);

  @override
  void registerListener({
    required String? key,
    required _i11.ValueChanged<String?>? listener,
  }) => super.noSuchMethod(
    Invocation.method(#registerListener, [], {#key: key, #listener: listener}),
    returnValueForMissingStub: null,
  );

  @override
  void unregisterListener({
    required String? key,
    required _i11.ValueChanged<String?>? listener,
  }) => super.noSuchMethod(
    Invocation.method(#unregisterListener, [], {
      #key: key,
      #listener: listener,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void unregisterAllListenersForKey({required String? key}) =>
      super.noSuchMethod(
        Invocation.method(#unregisterAllListenersForKey, [], {#key: key}),
        returnValueForMissingStub: null,
      );

  @override
  void unregisterAllListeners() => super.noSuchMethod(
    Invocation.method(#unregisterAllListeners, []),
    returnValueForMissingStub: null,
  );

  @override
  _i12.Future<void> write({
    required String? key,
    required String? value,
    _i2.IOSOptions? iOptions,
    _i2.AndroidOptions? aOptions,
    _i2.LinuxOptions? lOptions,
    _i2.WebOptions? webOptions,
    _i2.MacOsOptions? mOptions,
    _i2.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#write, [], {
              #key: key,
              #value: value,
              #iOptions: iOptions,
              #aOptions: aOptions,
              #lOptions: lOptions,
              #webOptions: webOptions,
              #mOptions: mOptions,
              #wOptions: wOptions,
            }),
            returnValue: _i12.Future<void>.value(),
            returnValueForMissingStub: _i12.Future<void>.value(),
          )
          as _i12.Future<void>);

  @override
  _i12.Future<String?> read({
    required String? key,
    _i2.IOSOptions? iOptions,
    _i2.AndroidOptions? aOptions,
    _i2.LinuxOptions? lOptions,
    _i2.WebOptions? webOptions,
    _i2.MacOsOptions? mOptions,
    _i2.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#read, [], {
              #key: key,
              #iOptions: iOptions,
              #aOptions: aOptions,
              #lOptions: lOptions,
              #webOptions: webOptions,
              #mOptions: mOptions,
              #wOptions: wOptions,
            }),
            returnValue: _i12.Future<String?>.value(),
          )
          as _i12.Future<String?>);

  @override
  _i12.Future<bool> containsKey({
    required String? key,
    _i2.IOSOptions? iOptions,
    _i2.AndroidOptions? aOptions,
    _i2.LinuxOptions? lOptions,
    _i2.WebOptions? webOptions,
    _i2.MacOsOptions? mOptions,
    _i2.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#containsKey, [], {
              #key: key,
              #iOptions: iOptions,
              #aOptions: aOptions,
              #lOptions: lOptions,
              #webOptions: webOptions,
              #mOptions: mOptions,
              #wOptions: wOptions,
            }),
            returnValue: _i12.Future<bool>.value(false),
          )
          as _i12.Future<bool>);

  @override
  _i12.Future<void> delete({
    required String? key,
    _i2.IOSOptions? iOptions,
    _i2.AndroidOptions? aOptions,
    _i2.LinuxOptions? lOptions,
    _i2.WebOptions? webOptions,
    _i2.MacOsOptions? mOptions,
    _i2.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [], {
              #key: key,
              #iOptions: iOptions,
              #aOptions: aOptions,
              #lOptions: lOptions,
              #webOptions: webOptions,
              #mOptions: mOptions,
              #wOptions: wOptions,
            }),
            returnValue: _i12.Future<void>.value(),
            returnValueForMissingStub: _i12.Future<void>.value(),
          )
          as _i12.Future<void>);

  @override
  _i12.Future<Map<String, String>> readAll({
    _i2.IOSOptions? iOptions,
    _i2.AndroidOptions? aOptions,
    _i2.LinuxOptions? lOptions,
    _i2.WebOptions? webOptions,
    _i2.MacOsOptions? mOptions,
    _i2.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readAll, [], {
              #iOptions: iOptions,
              #aOptions: aOptions,
              #lOptions: lOptions,
              #webOptions: webOptions,
              #mOptions: mOptions,
              #wOptions: wOptions,
            }),
            returnValue: _i12.Future<Map<String, String>>.value(
              <String, String>{},
            ),
          )
          as _i12.Future<Map<String, String>>);

  @override
  _i12.Future<void> deleteAll({
    _i2.IOSOptions? iOptions,
    _i2.AndroidOptions? aOptions,
    _i2.LinuxOptions? lOptions,
    _i2.WebOptions? webOptions,
    _i2.MacOsOptions? mOptions,
    _i2.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#deleteAll, [], {
              #iOptions: iOptions,
              #aOptions: aOptions,
              #lOptions: lOptions,
              #webOptions: webOptions,
              #mOptions: mOptions,
              #wOptions: wOptions,
            }),
            returnValue: _i12.Future<void>.value(),
            returnValueForMissingStub: _i12.Future<void>.value(),
          )
          as _i12.Future<void>);

  @override
  _i12.Future<bool?> isCupertinoProtectedDataAvailable() =>
      (super.noSuchMethod(
            Invocation.method(#isCupertinoProtectedDataAvailable, []),
            returnValue: _i12.Future<bool?>.value(),
          )
          as _i12.Future<bool?>);
}

/// A class which mocks [PGPProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockPGPProvider extends _i1.Mock implements _i13.PGPProvider {
  MockPGPProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<String> encrypt(String? text, String? publicKey) =>
      (super.noSuchMethod(
            Invocation.method(#encrypt, [text, publicKey]),
            returnValue: _i12.Future<String>.value(
              _i14.dummyValue<String>(
                this,
                Invocation.method(#encrypt, [text, publicKey]),
              ),
            ),
          )
          as _i12.Future<String>);

  @override
  _i12.Future<String> decrypt(
    String? encryptedText,
    String? privateKey,
    String? passphrase,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#decrypt, [
              encryptedText,
              privateKey,
              passphrase,
            ]),
            returnValue: _i12.Future<String>.value(
              _i14.dummyValue<String>(
                this,
                Invocation.method(#decrypt, [
                  encryptedText,
                  privateKey,
                  passphrase,
                ]),
              ),
            ),
          )
          as _i12.Future<String>);

  @override
  _i12.Future<_i3.KeyPair> generate({required _i3.Options? options}) =>
      (super.noSuchMethod(
            Invocation.method(#generate, [], {#options: options}),
            returnValue: _i12.Future<_i3.KeyPair>.value(
              _FakeKeyPair_6(
                this,
                Invocation.method(#generate, [], {#options: options}),
              ),
            ),
          )
          as _i12.Future<_i3.KeyPair>);

  @override
  _i12.Future<String> sign(
    String? text,
    String? privateKey,
    String? passphrase,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#sign, [text, privateKey, passphrase]),
            returnValue: _i12.Future<String>.value(
              _i14.dummyValue<String>(
                this,
                Invocation.method(#sign, [text, privateKey, passphrase]),
              ),
            ),
          )
          as _i12.Future<String>);

  @override
  _i12.Future<bool> verify(
    String? text,
    String? signature,
    String? publicKey,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#verify, [text, signature, publicKey]),
            returnValue: _i12.Future<bool>.value(false),
          )
          as _i12.Future<bool>);
}

/// A class which mocks [FileSystem].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileSystem extends _i1.Mock implements _i9.FileSystem {
  MockFileSystem() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Context get path =>
      (super.noSuchMethod(
            Invocation.getter(#path),
            returnValue: _FakeContext_7(this, Invocation.getter(#path)),
          )
          as _i4.Context);

  @override
  _i5.Directory get systemTempDirectory =>
      (super.noSuchMethod(
            Invocation.getter(#systemTempDirectory),
            returnValue: _FakeDirectory_8(
              this,
              Invocation.getter(#systemTempDirectory),
            ),
          )
          as _i5.Directory);

  @override
  _i5.Directory get currentDirectory =>
      (super.noSuchMethod(
            Invocation.getter(#currentDirectory),
            returnValue: _FakeDirectory_8(
              this,
              Invocation.getter(#currentDirectory),
            ),
          )
          as _i5.Directory);

  @override
  bool get isWatchSupported =>
      (super.noSuchMethod(
            Invocation.getter(#isWatchSupported),
            returnValue: false,
          )
          as bool);

  @override
  set currentDirectory(dynamic path) => super.noSuchMethod(
    Invocation.setter(#currentDirectory, path),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Directory directory(dynamic path) =>
      (super.noSuchMethod(
            Invocation.method(#directory, [path]),
            returnValue: _FakeDirectory_8(
              this,
              Invocation.method(#directory, [path]),
            ),
          )
          as _i5.Directory);

  @override
  _i6.File file(dynamic path) =>
      (super.noSuchMethod(
            Invocation.method(#file, [path]),
            returnValue: _FakeFile_9(this, Invocation.method(#file, [path])),
          )
          as _i6.File);

  @override
  _i7.Link link(dynamic path) =>
      (super.noSuchMethod(
            Invocation.method(#link, [path]),
            returnValue: _FakeLink_10(this, Invocation.method(#link, [path])),
          )
          as _i7.Link);

  @override
  _i12.Future<_i8.FileStat> stat(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#stat, [path]),
            returnValue: _i12.Future<_i8.FileStat>.value(
              _FakeFileStat_11(this, Invocation.method(#stat, [path])),
            ),
          )
          as _i12.Future<_i8.FileStat>);

  @override
  _i8.FileStat statSync(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#statSync, [path]),
            returnValue: _FakeFileStat_11(
              this,
              Invocation.method(#statSync, [path]),
            ),
          )
          as _i8.FileStat);

  @override
  _i12.Future<bool> identical(String? path1, String? path2) =>
      (super.noSuchMethod(
            Invocation.method(#identical, [path1, path2]),
            returnValue: _i12.Future<bool>.value(false),
          )
          as _i12.Future<bool>);

  @override
  bool identicalSync(String? path1, String? path2) =>
      (super.noSuchMethod(
            Invocation.method(#identicalSync, [path1, path2]),
            returnValue: false,
          )
          as bool);

  @override
  _i12.Future<_i8.FileSystemEntityType> type(
    String? path, {
    bool? followLinks = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#type, [path], {#followLinks: followLinks}),
            returnValue: _i12.Future<_i8.FileSystemEntityType>.value(
              _i14.dummyValue<_i8.FileSystemEntityType>(
                this,
                Invocation.method(#type, [path], {#followLinks: followLinks}),
              ),
            ),
          )
          as _i12.Future<_i8.FileSystemEntityType>);

  @override
  _i8.FileSystemEntityType typeSync(String? path, {bool? followLinks = true}) =>
      (super.noSuchMethod(
            Invocation.method(#typeSync, [path], {#followLinks: followLinks}),
            returnValue: _i14.dummyValue<_i8.FileSystemEntityType>(
              this,
              Invocation.method(#typeSync, [path], {#followLinks: followLinks}),
            ),
          )
          as _i8.FileSystemEntityType);

  @override
  _i12.Future<bool> isFile(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#isFile, [path]),
            returnValue: _i12.Future<bool>.value(false),
          )
          as _i12.Future<bool>);

  @override
  bool isFileSync(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#isFileSync, [path]),
            returnValue: false,
          )
          as bool);

  @override
  _i12.Future<bool> isDirectory(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#isDirectory, [path]),
            returnValue: _i12.Future<bool>.value(false),
          )
          as _i12.Future<bool>);

  @override
  bool isDirectorySync(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#isDirectorySync, [path]),
            returnValue: false,
          )
          as bool);

  @override
  _i12.Future<bool> isLink(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#isLink, [path]),
            returnValue: _i12.Future<bool>.value(false),
          )
          as _i12.Future<bool>);

  @override
  bool isLinkSync(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#isLinkSync, [path]),
            returnValue: false,
          )
          as bool);

  @override
  String getPath(dynamic path) =>
      (super.noSuchMethod(
            Invocation.method(#getPath, [path]),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.method(#getPath, [path]),
            ),
          )
          as String);
}

/// A class which mocks [File].
///
/// See the documentation for Mockito's code generation for more information.
class MockFile extends _i1.Mock implements _i6.File {
  MockFile() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.File get absolute =>
      (super.noSuchMethod(
            Invocation.getter(#absolute),
            returnValue: _FakeFile_9(this, Invocation.getter(#absolute)),
          )
          as _i6.File);

  @override
  _i9.FileSystem get fileSystem =>
      (super.noSuchMethod(
            Invocation.getter(#fileSystem),
            returnValue: _FakeFileSystem_12(
              this,
              Invocation.getter(#fileSystem),
            ),
          )
          as _i9.FileSystem);

  @override
  String get basename =>
      (super.noSuchMethod(
            Invocation.getter(#basename),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.getter(#basename),
            ),
          )
          as String);

  @override
  String get dirname =>
      (super.noSuchMethod(
            Invocation.getter(#dirname),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.getter(#dirname),
            ),
          )
          as String);

  @override
  _i5.Directory get parent =>
      (super.noSuchMethod(
            Invocation.getter(#parent),
            returnValue: _FakeDirectory_8(this, Invocation.getter(#parent)),
          )
          as _i5.Directory);

  @override
  String get path =>
      (super.noSuchMethod(
            Invocation.getter(#path),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.getter(#path),
            ),
          )
          as String);

  @override
  Uri get uri =>
      (super.noSuchMethod(
            Invocation.getter(#uri),
            returnValue: _FakeUri_13(this, Invocation.getter(#uri)),
          )
          as Uri);

  @override
  bool get isAbsolute =>
      (super.noSuchMethod(Invocation.getter(#isAbsolute), returnValue: false)
          as bool);

  @override
  _i12.Future<_i6.File> create({
    bool? recursive = false,
    bool? exclusive = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#create, [], {
              #recursive: recursive,
              #exclusive: exclusive,
            }),
            returnValue: _i12.Future<_i6.File>.value(
              _FakeFile_9(
                this,
                Invocation.method(#create, [], {
                  #recursive: recursive,
                  #exclusive: exclusive,
                }),
              ),
            ),
          )
          as _i12.Future<_i6.File>);

  @override
  _i12.Future<_i6.File> rename(String? newPath) =>
      (super.noSuchMethod(
            Invocation.method(#rename, [newPath]),
            returnValue: _i12.Future<_i6.File>.value(
              _FakeFile_9(this, Invocation.method(#rename, [newPath])),
            ),
          )
          as _i12.Future<_i6.File>);

  @override
  _i6.File renameSync(String? newPath) =>
      (super.noSuchMethod(
            Invocation.method(#renameSync, [newPath]),
            returnValue: _FakeFile_9(
              this,
              Invocation.method(#renameSync, [newPath]),
            ),
          )
          as _i6.File);

  @override
  _i12.Future<_i6.File> copy(String? newPath) =>
      (super.noSuchMethod(
            Invocation.method(#copy, [newPath]),
            returnValue: _i12.Future<_i6.File>.value(
              _FakeFile_9(this, Invocation.method(#copy, [newPath])),
            ),
          )
          as _i12.Future<_i6.File>);

  @override
  _i6.File copySync(String? newPath) =>
      (super.noSuchMethod(
            Invocation.method(#copySync, [newPath]),
            returnValue: _FakeFile_9(
              this,
              Invocation.method(#copySync, [newPath]),
            ),
          )
          as _i6.File);

  @override
  _i12.Future<_i6.File> writeAsBytes(
    List<int>? bytes, {
    _i8.FileMode? mode = _i8.FileMode.write,
    bool? flush = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #writeAsBytes,
              [bytes],
              {#mode: mode, #flush: flush},
            ),
            returnValue: _i12.Future<_i6.File>.value(
              _FakeFile_9(
                this,
                Invocation.method(
                  #writeAsBytes,
                  [bytes],
                  {#mode: mode, #flush: flush},
                ),
              ),
            ),
          )
          as _i12.Future<_i6.File>);

  @override
  _i12.Future<_i6.File> writeAsString(
    String? contents, {
    _i8.FileMode? mode = _i8.FileMode.write,
    _i15.Encoding? encoding = const _i15.Utf8Codec(),
    bool? flush = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #writeAsString,
              [contents],
              {#mode: mode, #encoding: encoding, #flush: flush},
            ),
            returnValue: _i12.Future<_i6.File>.value(
              _FakeFile_9(
                this,
                Invocation.method(
                  #writeAsString,
                  [contents],
                  {#mode: mode, #encoding: encoding, #flush: flush},
                ),
              ),
            ),
          )
          as _i12.Future<_i6.File>);

  @override
  _i12.Future<_i10.FileSystemEntity> delete({bool? recursive = false}) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [], {#recursive: recursive}),
            returnValue: _i12.Future<_i10.FileSystemEntity>.value(
              _FakeFileSystemEntity_14(
                this,
                Invocation.method(#delete, [], {#recursive: recursive}),
              ),
            ),
          )
          as _i12.Future<_i10.FileSystemEntity>);

  @override
  _i12.Future<bool> exists() =>
      (super.noSuchMethod(
            Invocation.method(#exists, []),
            returnValue: _i12.Future<bool>.value(false),
          )
          as _i12.Future<bool>);

  @override
  bool existsSync() =>
      (super.noSuchMethod(
            Invocation.method(#existsSync, []),
            returnValue: false,
          )
          as bool);

  @override
  _i12.Future<String> resolveSymbolicLinks() =>
      (super.noSuchMethod(
            Invocation.method(#resolveSymbolicLinks, []),
            returnValue: _i12.Future<String>.value(
              _i14.dummyValue<String>(
                this,
                Invocation.method(#resolveSymbolicLinks, []),
              ),
            ),
          )
          as _i12.Future<String>);

  @override
  String resolveSymbolicLinksSync() =>
      (super.noSuchMethod(
            Invocation.method(#resolveSymbolicLinksSync, []),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.method(#resolveSymbolicLinksSync, []),
            ),
          )
          as String);

  @override
  _i12.Future<_i8.FileStat> stat() =>
      (super.noSuchMethod(
            Invocation.method(#stat, []),
            returnValue: _i12.Future<_i8.FileStat>.value(
              _FakeFileStat_11(this, Invocation.method(#stat, [])),
            ),
          )
          as _i12.Future<_i8.FileStat>);

  @override
  _i8.FileStat statSync() =>
      (super.noSuchMethod(
            Invocation.method(#statSync, []),
            returnValue: _FakeFileStat_11(
              this,
              Invocation.method(#statSync, []),
            ),
          )
          as _i8.FileStat);

  @override
  void deleteSync({bool? recursive = false}) => super.noSuchMethod(
    Invocation.method(#deleteSync, [], {#recursive: recursive}),
    returnValueForMissingStub: null,
  );

  @override
  _i12.Stream<_i8.FileSystemEvent> watch({
    int? events = 15,
    bool? recursive = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#watch, [], {
              #events: events,
              #recursive: recursive,
            }),
            returnValue: _i12.Stream<_i8.FileSystemEvent>.empty(),
          )
          as _i12.Stream<_i8.FileSystemEvent>);

  @override
  void createSync({bool? recursive = false, bool? exclusive = false}) =>
      super.noSuchMethod(
        Invocation.method(#createSync, [], {
          #recursive: recursive,
          #exclusive: exclusive,
        }),
        returnValueForMissingStub: null,
      );

  @override
  _i12.Future<int> length() =>
      (super.noSuchMethod(
            Invocation.method(#length, []),
            returnValue: _i12.Future<int>.value(0),
          )
          as _i12.Future<int>);

  @override
  int lengthSync() =>
      (super.noSuchMethod(Invocation.method(#lengthSync, []), returnValue: 0)
          as int);

  @override
  _i12.Future<DateTime> lastAccessed() =>
      (super.noSuchMethod(
            Invocation.method(#lastAccessed, []),
            returnValue: _i12.Future<DateTime>.value(
              _FakeDateTime_15(this, Invocation.method(#lastAccessed, [])),
            ),
          )
          as _i12.Future<DateTime>);

  @override
  DateTime lastAccessedSync() =>
      (super.noSuchMethod(
            Invocation.method(#lastAccessedSync, []),
            returnValue: _FakeDateTime_15(
              this,
              Invocation.method(#lastAccessedSync, []),
            ),
          )
          as DateTime);

  @override
  _i12.Future<dynamic> setLastAccessed(DateTime? time) =>
      (super.noSuchMethod(
            Invocation.method(#setLastAccessed, [time]),
            returnValue: _i12.Future<dynamic>.value(),
          )
          as _i12.Future<dynamic>);

  @override
  void setLastAccessedSync(DateTime? time) => super.noSuchMethod(
    Invocation.method(#setLastAccessedSync, [time]),
    returnValueForMissingStub: null,
  );

  @override
  _i12.Future<DateTime> lastModified() =>
      (super.noSuchMethod(
            Invocation.method(#lastModified, []),
            returnValue: _i12.Future<DateTime>.value(
              _FakeDateTime_15(this, Invocation.method(#lastModified, [])),
            ),
          )
          as _i12.Future<DateTime>);

  @override
  DateTime lastModifiedSync() =>
      (super.noSuchMethod(
            Invocation.method(#lastModifiedSync, []),
            returnValue: _FakeDateTime_15(
              this,
              Invocation.method(#lastModifiedSync, []),
            ),
          )
          as DateTime);

  @override
  _i12.Future<dynamic> setLastModified(DateTime? time) =>
      (super.noSuchMethod(
            Invocation.method(#setLastModified, [time]),
            returnValue: _i12.Future<dynamic>.value(),
          )
          as _i12.Future<dynamic>);

  @override
  void setLastModifiedSync(DateTime? time) => super.noSuchMethod(
    Invocation.method(#setLastModifiedSync, [time]),
    returnValueForMissingStub: null,
  );

  @override
  _i12.Future<_i8.RandomAccessFile> open({
    _i8.FileMode? mode = _i8.FileMode.read,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#open, [], {#mode: mode}),
            returnValue: _i12.Future<_i8.RandomAccessFile>.value(
              _FakeRandomAccessFile_16(
                this,
                Invocation.method(#open, [], {#mode: mode}),
              ),
            ),
          )
          as _i12.Future<_i8.RandomAccessFile>);

  @override
  _i8.RandomAccessFile openSync({_i8.FileMode? mode = _i8.FileMode.read}) =>
      (super.noSuchMethod(
            Invocation.method(#openSync, [], {#mode: mode}),
            returnValue: _FakeRandomAccessFile_16(
              this,
              Invocation.method(#openSync, [], {#mode: mode}),
            ),
          )
          as _i8.RandomAccessFile);

  @override
  _i12.Stream<List<int>> openRead([int? start, int? end]) =>
      (super.noSuchMethod(
            Invocation.method(#openRead, [start, end]),
            returnValue: _i12.Stream<List<int>>.empty(),
          )
          as _i12.Stream<List<int>>);

  @override
  _i8.IOSink openWrite({
    _i8.FileMode? mode = _i8.FileMode.write,
    _i15.Encoding? encoding = const _i15.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#openWrite, [], {
              #mode: mode,
              #encoding: encoding,
            }),
            returnValue: _FakeIOSink_17(
              this,
              Invocation.method(#openWrite, [], {
                #mode: mode,
                #encoding: encoding,
              }),
            ),
          )
          as _i8.IOSink);

  @override
  _i12.Future<_i16.Uint8List> readAsBytes() =>
      (super.noSuchMethod(
            Invocation.method(#readAsBytes, []),
            returnValue: _i12.Future<_i16.Uint8List>.value(_i16.Uint8List(0)),
          )
          as _i12.Future<_i16.Uint8List>);

  @override
  _i16.Uint8List readAsBytesSync() =>
      (super.noSuchMethod(
            Invocation.method(#readAsBytesSync, []),
            returnValue: _i16.Uint8List(0),
          )
          as _i16.Uint8List);

  @override
  _i12.Future<String> readAsString({
    _i15.Encoding? encoding = const _i15.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readAsString, [], {#encoding: encoding}),
            returnValue: _i12.Future<String>.value(
              _i14.dummyValue<String>(
                this,
                Invocation.method(#readAsString, [], {#encoding: encoding}),
              ),
            ),
          )
          as _i12.Future<String>);

  @override
  String readAsStringSync({_i15.Encoding? encoding = const _i15.Utf8Codec()}) =>
      (super.noSuchMethod(
            Invocation.method(#readAsStringSync, [], {#encoding: encoding}),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.method(#readAsStringSync, [], {#encoding: encoding}),
            ),
          )
          as String);

  @override
  _i12.Future<List<String>> readAsLines({
    _i15.Encoding? encoding = const _i15.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readAsLines, [], {#encoding: encoding}),
            returnValue: _i12.Future<List<String>>.value(<String>[]),
          )
          as _i12.Future<List<String>>);

  @override
  List<String> readAsLinesSync({
    _i15.Encoding? encoding = const _i15.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readAsLinesSync, [], {#encoding: encoding}),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  void writeAsBytesSync(
    List<int>? bytes, {
    _i8.FileMode? mode = _i8.FileMode.write,
    bool? flush = false,
  }) => super.noSuchMethod(
    Invocation.method(#writeAsBytesSync, [bytes], {#mode: mode, #flush: flush}),
    returnValueForMissingStub: null,
  );

  @override
  void writeAsStringSync(
    String? contents, {
    _i8.FileMode? mode = _i8.FileMode.write,
    _i15.Encoding? encoding = const _i15.Utf8Codec(),
    bool? flush = false,
  }) => super.noSuchMethod(
    Invocation.method(
      #writeAsStringSync,
      [contents],
      {#mode: mode, #encoding: encoding, #flush: flush},
    ),
    returnValueForMissingStub: null,
  );
}
